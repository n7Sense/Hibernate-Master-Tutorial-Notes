	Hibernate Framework
===========================
		
		Hibernate tool is the best tool for implementing persistencies Logic. as compared to other ORM tool.
		before the Hibernate the industries people used the JDBC technology


JDBC technology Problem
-------------------
	
	1. the total JDBC code is comes under Checked Exceptions code.
	2. Memory Leakage Problem, heare Java Programmer is responsible to Opne and Close the connection, unfortunately if
		connection are not closed, will throw Memory Leakage Exception.
	3. Error Codes was generated by the JDBC technology. which is NOT understandable lie ORA-666
	4. We need to write Boilar Plate Codes (i.e we need to write some Duplicate code each and every time in our application)
		Example: if we have 10-Servlet, then each Servlet required to load 
			-Driver Class
			-Passthe URL with User Name - Password
			-Statement 
			-ExecuteStatement.
		In rder to overcome this problem the industries people introduced the Entity Beans which is Given by the EJB technology.
		But whenever we are using Entity Beans there is some problems.
		Entity Beans used as Front-End
		-------------------------------
			it used  for persistencies Logic
		EJB Problem
		------------
			1. The total EJB component are heavy-weight. 
				(heavy-weight component means, Must we need to defined Pre-Defiend API , Component is nothing but a One Class)
			Example: If you want to develope with Servlet application there is 3-way
				
				1. impplement Servlet{

					this 3-Are Lifecycle methods
					-------------------
					init()
					service()
					destroy()

					this 2 are Non-Lifecycle methods.
					------------------------
					getServletinfo()
					getServletConfig()
				}

				 we need to provide the implementation of this all Overridden methods, maximum we will develop our business logi in
				 service() methods, un-necessorly our application size become increase, there is no use for client side and development
				 side.

				 2. extends GenericServlet{
				 		service();
				 		all other methods are not required, even thoe either Directly-or-Indirectly all the methods are coming 
				 		from Servlet interface because internally GenericServlet implements Servlet
				 }

				 3. extends HttpServlet{
				 	doGet() , doPost()
				 	but even either Directly-or-Indirectly this implements all other methods and become heavy-weight	
				 	because internally HttpServlet extends GenericServlet

				 }

				 NOTE: whenever we are implementing or extending pre defined API then lot of API coming in our application
				 finally our application become a heavy-weight

				 In the same way whenever we are using Entity Beans for persistencies purpse.
				 Must we shuld implement the EntityBeans interface and the many methods comes in our application
				 un-necessorly our component become heavy-weight component

				 ejbActivate()
				 A container invokes this method when the instance is taken out of the pool of available instances to become associated with a specific EJB object.
				 void	ejbLoad()
				 A container invokes this method to instruct the instance to synchronize its state by loading it state from the underlying database.
				 void	ejbPassivate()
				 A container invokes this method on an instance before the instance becomes disassociated with a specific EJB object.
				 void	ejbRemove()
				 A container invokes this method before it removes the EJB object that is currently associated with the instance.
				 void	ejbStore()
				 A container invokes this method to instruct the instance to synchronize its state by storing it to the underlying database.
				 void	setEntityContext(EntityContext ctx)
				 Set the associated entity context.
				 void	unsetEntityContext()


			2. Testing is More Complex.
				IF we want to test the EJB component must we shuld need to place inside Middleweare Server either WebLogic, GlassFish, JBoss
				, IBM Speare servers etc.
				must we need to use Application Server ., Web-Server not supported like Tomcat.

			3. we need to develop more no. of XML files
				if we developed SBI project in 2002 with WebLogic Server as well as project related and Server related
					XML files ther are created. in 2015 this project getting slow. after complaint , the Project Manger and
				all Senior developer and manager desided to change the Server they found that GlassFish server is faster.
				Whener we migrate our EJB protect from WebLogic to GlassFish server now once again we have to developed 
				GlassFish server related XML files, what is the guirenty that tomorrow this GlassFish server will work properly
				after GlassFish server once again we have to develop the XML files

IN ORDER TO OVERCOME THIS ALL PROBLEMS, INDUSTRIES PEOPLES WAS INTRODUCE THE technology I.E MRM TOOL like
Hibernate
JPA
iBaties
topLink etc.

By using this Framework we can develop the light-weight components as well as testing is very easy, we no need to use
applicatiuon server
 
 We no need to develop servers dependent XML files each and every time only one time it is inough,
 and any server we want we can deploy the example and it will work.
 But present the development side uising the server  is not good aproach i.e the reason Hibernate people was going to be given
 to the out side the server some Container. (container is nothing but a Class.)
 When testing is completed then we can move to the server side.



